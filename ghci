-- :set -XTemplateHaskell
-- :m +Language.Haskell.TH
--let vis = do
--  GHC.Vis.GTK.tvis visGlobalVar
--  return ()
--let printP x = Data.IORef.modifyIORef visGlobalVar (\y -> y ++ [GHC.HeapView.asBox x]) >> return ""
-- :def a \x -> putStrLn $(varE (mkName x)) >> return ""
-- :def b \x -> return $ x ++ "foo"

visGlobalVar <- Data.IORef.newIORef [] :: IO (GHC.IORef.IORef [GHC.HeapView.Box])
:def vis \x -> GHC.Vis.GTK.tvis visGlobalVar >> return ""
:def view \x -> return $ "Data.IORef.modifyIORef visGlobalVar (\\y -> y ++ [GHC.HeapView.asBox " ++ x ++ "])"
:def eval \x -> return $ "GHC.Vis.evalP " ++ head (words x) ++ " \"" ++ last (words x) ++ "\""
